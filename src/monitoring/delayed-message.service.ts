import { Injectable, Logger } from '@nestjs/common';
import { TelegramClientService } from '../telegram/telegram-client.service';
import { Api } from 'telegram';

export interface DelayedMessageTask {
  id: string;
  targetUserId: string;
  targetChatId: string;
  message: string;
  scheduledTime: Date;
  originalMessage: {
    text: string;
    chatTitle: string;
    userName: string;
    username?: string;
    messageDate: Date;
  };
  status: 'pending' | 'sent' | 'failed';
  attempts: number;
  maxAttempts: number;
}

@Injectable()
export class DelayedMessageService {
  private readonly logger = new Logger(DelayedMessageService.name);
  private pendingMessages: Map<string, DelayedMessageTask> = new Map();
  private timers: Map<string, NodeJS.Timeout> = new Map();

  constructor(private readonly telegramClient: TelegramClientService) {}

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param targetUserId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
   * @param targetChatId ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
   * @param message –¢–µ–∫—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param delayMinutes –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
   * @param originalMessage –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
   * @param logChatId ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async scheduleDelayedMessage(
    targetUserId: string,
    targetChatId: string,
    message: string,
    delayMinutes: number,
    originalMessage: {
      text: string;
      chatTitle: string;
      userName: string;
      username?: string;
      messageDate: Date;
    },
    logChatId?: string
  ): Promise<string> {
    const taskId = this.generateTaskId();
    const scheduledTime = new Date(Date.now() + delayMinutes * 60 * 1000);

    const task: DelayedMessageTask = {
      id: taskId,
      targetUserId,
      targetChatId,
      message,
      scheduledTime,
      originalMessage,
      status: 'pending',
      attempts: 0,
      maxAttempts: 3
    };

    this.pendingMessages.set(taskId, task);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
    const timer = setTimeout(async () => {
      await this.executeDelayedMessage(taskId, logChatId);
    }, delayMinutes * 60 * 1000);

    this.timers.set(taskId, timer);

    this.logger.log(
      `‚è∞ Scheduled delayed message for user ${targetUserId} in ${delayMinutes} minutes. Task ID: ${taskId}`
    );

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (logChatId) {
      await this.sendLogMessage(
        logChatId,
        this.formatScheduleLogMessage(task, delayMinutes)
      );
    }

    return taskId;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async executeDelayedMessage(taskId: string, logChatId?: string): Promise<void> {
    const task = this.pendingMessages.get(taskId);
    if (!task) {
      this.logger.warn(`Task ${taskId} not found`);
      return;
    }

    task.attempts++;
    this.logger.log(`üì§ Executing delayed message ${taskId} (attempt ${task.attempts}/${task.maxAttempts})`);

    try {
      const client = this.telegramClient.getClient();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await client.sendMessage(task.targetUserId, {
        message: task.message,
        parseMode: 'markdown'
      });

      task.status = 'sent';
      this.logger.log(`‚úÖ Delayed message ${taskId} sent successfully`);

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      if (logChatId) {
        await this.sendLogMessage(
          logChatId,
          this.formatSentLogMessage(task)
        );
      }

    } catch (error) {
      this.logger.error(`‚ùå Failed to send delayed message ${taskId}:`, error.message);
      
      if (task.attempts < task.maxAttempts) {
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        this.scheduleRetry(taskId, 5, logChatId);
      } else {
        task.status = 'failed';
        this.logger.error(`‚ùå Delayed message ${taskId} failed after ${task.maxAttempts} attempts`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É
        if (logChatId) {
          await this.sendLogMessage(
            logChatId,
            this.formatFailedLogMessage(task, error.message)
          );
        }
      }
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
      const timer = this.timers.get(taskId);
      if (timer) {
        clearTimeout(timer);
        this.timers.delete(taskId);
      }

      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω–æ), —É–¥–∞–ª—è–µ–º –∏–∑ pending
      if (task.status === 'sent' || task.status === 'failed') {
        this.pendingMessages.delete(taskId);
      }
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
   */
  private scheduleRetry(taskId: string, delayMinutes: number, logChatId?: string): void {
    const timer = setTimeout(async () => {
      await this.executeDelayedMessage(taskId, logChatId);
    }, delayMinutes * 60 * 1000);

    this.timers.set(taskId, timer);
    this.logger.log(`üîÑ Scheduled retry for delayed message ${taskId} in ${delayMinutes} minutes`);
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async cancelDelayedMessage(taskId: string): Promise<boolean> {
    const task = this.pendingMessages.get(taskId);
    if (!task) {
      return false;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    const timer = this.timers.get(taskId);
    if (timer) {
      clearTimeout(timer);
      this.timers.delete(taskId);
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    this.pendingMessages.delete(taskId);
    
    this.logger.log(`‚ùå Cancelled delayed message ${taskId}`);
    return true;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö pending —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getPendingMessages(): DelayedMessageTask[] {
    return Array.from(this.pendingMessages.values());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ
   */
  getTask(taskId: string): DelayedMessageTask | undefined {
    return this.pendingMessages.get(taskId);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  private generateTaskId(): string {
    return `dm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç
   */
  private async sendLogMessage(logChatId: string, message: string): Promise<void> {
    try {
      const client = this.telegramClient.getClient();
      await client.sendMessage(logChatId, {
        message,
        parseMode: 'markdown'
      });
    } catch (error) {
      this.logger.error('Failed to send log message:', error.message);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private formatScheduleLogMessage(task: DelayedMessageTask, delayMinutes: number): string {
    const scheduledTimeStr = task.scheduledTime.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `‚è∞ **–û–¢–õ–û–ñ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–û**

üìù **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
"${task.originalMessage.text}"

üë§ **–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${task.originalMessage.userName}${task.originalMessage.username ? ` (@${task.originalMessage.username})` : ''}
üí¨ **–ò–∑ —á–∞—Ç–∞:** ${task.originalMessage.chatTitle}
‚è±Ô∏è **–í—Ä–µ–º—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:** ${task.originalMessage.messageDate.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

üì§ **–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
"${task.message}"

‚è∞ **–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** ${scheduledTimeStr} (—á–µ—Ä–µ–∑ ${delayMinutes} –º–∏–Ω)
üÜî **ID –∑–∞–¥–∞—á–∏:** \`${task.id}\``;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
   */
  private formatSentLogMessage(task: DelayedMessageTask): string {
    const sentTimeStr = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `‚úÖ **–û–¢–õ–û–ñ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û**

üì§ **–°–æ–æ–±—â–µ–Ω–∏–µ:** "${task.message}"
üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—é:** ${task.originalMessage.userName}${task.originalMessage.username ? ` (@${task.originalMessage.username})` : ''}
‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** ${sentTimeStr}
üÜî **ID –∑–∞–¥–∞—á–∏:** \`${task.id}\``;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
   */
  private formatFailedLogMessage(task: DelayedMessageTask, errorMessage: string): string {
    return `‚ùå **–û–¢–õ–û–ñ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ù–ï –î–û–°–¢–ê–í–õ–ï–ù–û**

üì§ **–°–æ–æ–±—â–µ–Ω–∏–µ:** "${task.message}"
üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—é:** ${task.originalMessage.userName}${task.originalMessage.username ? ` (@${task.originalMessage.username})` : ''}
üîÑ **–ü–æ–ø—ã—Ç–æ–∫:** ${task.attempts}/${task.maxAttempts}
‚ùå **–û—à–∏–±–∫–∞:** ${errorMessage}
üÜî **ID –∑–∞–¥–∞—á–∏:** \`${task.id}\``;
  }
}
