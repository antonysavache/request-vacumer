import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { TelegramClientService } from '../telegram/telegram-client.service';
import { MessageFilterService } from './message-filter.service';
import { DelayedMessageService } from './delayed-message.service';
import { getMonitoringConfig, MonitoringConfig } from './monitoring.config';
import { NewMessage } from 'telegram/events';

@Injectable()
export class ChatMonitorService implements OnModuleInit {
  private readonly logger = new Logger(ChatMonitorService.name);
  private config: MonitoringConfig;
  private isMonitoring = false;

  constructor(
    private readonly telegramClientService: TelegramClientService,
    private readonly messageFilterService: MessageFilterService,
    private readonly delayedMessageService: DelayedMessageService,
  ) {}

  async onModuleInit() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.config = getMonitoringConfig();
      
      this.logger.log('üìã EVENT-BASED monitoring configuration:');
      this.logger.log(`üéØ Target chats: ${this.config.targetChats.join(', ')}`);
      this.logger.log(`üìù Keywords: ${this.config.keywords.join(', ')}`);
      this.logger.log(`üì§ Forward to: ${this.config.targetChatId}`);
      this.logger.log(`‚è∞ Delayed messages: ${this.config.delayedMessagesEnabled ? 'ENABLED' : 'DISABLED'}`);
      if (this.config.delayedMessagesEnabled) {
        this.logger.log(`‚è±Ô∏è Default delay: ${this.config.defaultDelayMinutes} minutes`);
        this.logger.log(`üìä Log chat: ${this.config.logChatId || 'Not set'}`);
      }

      // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      await this.waitForClientAndStartMonitoring();
      
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize event-based monitor:', error.message);
    }
  }

  private async waitForClientAndStartMonitoring(): Promise<void> {
    this.logger.log('‚è≥ Waiting for Telegram client to be ready...');
    
    let attempts = 0;
    while (!this.telegramClientService.isReady() && attempts < 60) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempts++;
    }
    
    if (!this.telegramClientService.isReady()) {
      this.logger.error('‚ùå Telegram client failed to initialize within 60 seconds');
      return;
    }

    this.logger.log('‚úÖ Telegram client is ready, starting EVENT-BASED monitoring...');
    await this.startMonitoring();
  }

  async startMonitoring(): Promise<void> {
    if (this.isMonitoring) {
      this.logger.warn('‚ö†Ô∏è Event monitoring is already running');
      return;
    }

    try {
      const client = this.telegramClientService.getClient();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —á–∞—Ç–æ–≤
      await this.validateTargetChats();
      
      this.isMonitoring = true;
      this.logger.log('üöÄ Starting real-time EVENT monitoring...');

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      client.addEventHandler(this.handleNewMessage.bind(this), new NewMessage({}));

      this.logger.log('üëÇ Listening for new message EVENTS in real-time...');
      
    } catch (error) {
      this.logger.error('‚ùå Failed to start event monitoring:', error.message);
      this.isMonitoring = false;
    }
  }

  private async validateTargetChats(): Promise<void> {
    this.logger.log('üîç Validating target chats...');
    
    const client = this.telegramClientService.getClient();
    const validChats: string[] = [];

    for (const chatId of this.config.targetChats) {
      try {
        const entity = await client.getEntity(chatId);
        const chatTitle = this.getEntityTitle(entity);
        validChats.push(chatId);
        this.logger.log(`‚úÖ Chat accessible: ${chatTitle} (${chatId})`);
      } catch (error) {
        this.logger.error(`‚ùå Chat not accessible: ${chatId} - ${error.message}`);
      }
    }

    if (validChats.length === 0) {
      throw new Error('No accessible target chats found');
    }

    this.logger.log(`üìä Monitoring ${validChats.length}/${this.config.targetChats.length} chats via EVENTS`);
  }

  private async handleNewMessage(event: any): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
      const message = event.message;
      if (!message || !message.message) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
      let chatId: string;
      
      if (message.peerId) {
        if (message.peerId.className === 'PeerChannel') {
          chatId = `-100${message.peerId.channelId}`;
        } else if (message.peerId.className === 'PeerChat') {
          chatId = `-${message.peerId.chatId}`;
        } else {
          return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
      } else {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤
      if (!this.config.targetChats.includes(chatId)) {
        return;
      }

      this.logger.log(`üéâ NEW MESSAGE EVENT from target chat: ${chatId}`);

      const messageText = message.message;
      const messageDate = new Date(message.date * 1000);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const client = this.telegramClientService.getClient();
      const chatEntity = await client.getEntity(chatId);
      const chatTitle = this.getEntityTitle(chatEntity);
      
      this.logger.log(`üí¨ Message from: ${chatTitle}`);
      this.logger.log(`üìù Text: "${messageText}"`);
      
      let userName: string | null = null;
      let username: string | null = null;
      let userId: string | null = null;
      
      if (message.fromId) {
        try {
          const userEntity = await client.getEntity(message.fromId);
          userName = this.getUserDisplayName(userEntity);
          username = this.getUserUsername(userEntity);
          userId = message.fromId.userId?.toString() || null;
          
          this.logger.log(`üë§ User: ${userName} (${username || 'no username'}) ID: ${userId}`);
          
        } catch (error) {
          this.logger.warn(`Failed to get user info: ${error.message}`);
          userName = 'Unknown User';
          username = null;
          userId = null;
        }
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const filterResult = this.messageFilterService.filterMessage(messageText, this.config);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.messageFilterService.logFilterResult(chatTitle, messageText, filterResult);

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
      if (filterResult.shouldForward) {
        await this.forwardMessage(
          messageText,
          chatTitle,
          chatId,
          userName,
          username,
          userId,
          filterResult.matchedKeywords,
          messageDate
        );
      }

    } catch (error) {
      this.logger.error('‚ùå Error handling new message event:', error.message);
    }
  }

  private async forwardMessage(
    originalMessage: string,
    chatTitle: string,
    chatId: string,
    userName: string | null,
    username: string | null,
    userId: string | null,
    matchedKeywords: string[],
    messageDate: Date
  ): Promise<void> {
    try {
      this.logger.log(`üì§ Forwarding message from ${chatTitle} to target chat`);
      
      const client = this.telegramClientService.getClient();
      
      const forwardedMessage = this.messageFilterService.formatForwardMessage(
        originalMessage,
        chatTitle,
        chatId,
        userName,
        username,
        matchedKeywords,
        messageDate
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
      const targetEntity = await client.getEntity(this.config.targetChatId);
      await client.sendMessage(targetEntity, { message: forwardedMessage });
      
      this.logger.log(`‚úÖ Message forwarded successfully (user: ${username || userName})`);

      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (this.config.delayedMessagesEnabled && userId && userName) {
        await this.scheduleDelayedResponse(
          originalMessage,
          chatTitle,
          chatId,
          userId,
          userName,
          username,
          messageDate,
          matchedKeywords
        );
      }
      
    } catch (error) {
      this.logger.error(`‚ùå Failed to forward message: ${error.message}`);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  private async scheduleDelayedResponse(
    originalMessage: string,
    chatTitle: string,
    chatId: string,
    userId: string,
    userName: string,
    username: string | null,
    messageDate: Date,
    matchedKeywords: string[]
  ): Promise<void> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const delayedMessage = this.createDelayedMessage(originalMessage, chatTitle, matchedKeywords);

      const taskId = await this.delayedMessageService.scheduleDelayedMessage(
        userId, // —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π userId
        chatId,
        delayedMessage,
        this.config.defaultDelayMinutes!,
        {
          text: originalMessage,
          chatTitle,
          userName,
          username: username || undefined,
          messageDate
        },
        this.config.logChatId
      );

      this.logger.log(`‚è∞ Scheduled delayed message for ${userName}: ${taskId}`);

    } catch (error) {
      this.logger.error(`‚ùå Failed to schedule delayed message: ${error.message}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private createDelayedMessage(originalMessage: string, chatTitle: string, matchedKeywords: string[]): string {
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    return this.config.delayedMessage || '–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –≤ –õ–°.';
  }

  private getEntityTitle(entity: any): string {
    return entity?.title || entity?.firstName || 'Unknown Chat';
  }

  private getUserDisplayName(entity: any): string {
    if (entity?.firstName && entity?.lastName) {
      return `${entity.firstName} ${entity.lastName}`;
    }
    if (entity?.firstName) {
      return entity.firstName;
    }
    if (entity?.username) {
      return `@${entity.username}`;
    }
    return 'Unknown User';
  }

  private getUserUsername(entity: any): string | null {
    if (entity?.username) {
      return `@${entity.username}`;
    }
    return null;
  }

  stopMonitoring(): void {
    if (this.isMonitoring) {
      this.isMonitoring = false;
      this.logger.log('üõë Event monitoring stopped');
    }
  }

  isActive(): boolean {
    return this.isMonitoring;
  }
}
