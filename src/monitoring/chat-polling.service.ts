import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { TelegramClientService } from '../telegram/telegram-client.service';
import { MessageFilterService } from './message-filter.service';
import { getMonitoringConfig, MonitoringConfig } from './monitoring.config';

interface ProcessedMessage {
  id: number;
  chatId: string;
  timestamp: number;
}

@Injectable()
export class ChatPollingService implements OnModuleInit {
  private readonly logger = new Logger(ChatPollingService.name);
  private config: MonitoringConfig;
  private isPolling = false;
  private pollingInterval: NodeJS.Timeout | null = null;
  private processedMessages: Map<string, Set<number>> = new Map(); // chatId -> Set of message IDs
  private readonly POLLING_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
  private readonly MESSAGES_LIMIT = 10; // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

  constructor(
    private readonly telegramClientService: TelegramClientService,
    private readonly messageFilterService: MessageFilterService,
  ) {}

  async onModuleInit() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.config = getMonitoringConfig();
      
      this.logger.log('üìã TARGETED Polling configuration loaded:');
      this.logger.log(`üéØ Target chats from ENV: ${this.config.targetChats.join(', ')}`);
      this.logger.log(`üìù Keywords: ${this.config.keywords.join(', ')}`);
      this.logger.log(`üì§ Forward to: ${this.config.targetChatId}`);
      this.logger.log(`‚è∞ Polling interval: ${this.POLLING_INTERVAL / 1000} seconds`);
      this.logger.log(`üìä Messages per check: ${this.MESSAGES_LIMIT}`);
      this.logger.log(`‚úÖ Will ONLY poll chats from TARGET_CHATS env variable`);
      
      if (this.config.excludeKeywords) {
        this.logger.log(`üö´ Exclude keywords: ${this.config.excludeKeywords.join(', ')}`);
      }
      
      if (this.config.minMessageLength) {
        this.logger.log(`üìè Min message length: ${this.config.minMessageLength}`);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Set –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
      this.config.targetChats.forEach(chatId => {
        this.processedMessages.set(chatId, new Set());
        this.logger.log(`üìã Initialized tracking for chat: ${chatId}`);
      });

      // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
      await this.waitForClientAndStartPolling();
      
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize targeted polling:', error.message);
    }
  }

  private async waitForClientAndStartPolling(): Promise<void> {
    this.logger.log('‚è≥ Waiting for Telegram client to be ready...');
    
    let attempts = 0;
    while (!this.telegramClientService.isReady() && attempts < 60) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempts++;
    }
    
    if (!this.telegramClientService.isReady()) {
      this.logger.error('‚ùå Telegram client failed to initialize within 60 seconds');
      return;
    }

    this.logger.log('‚úÖ Telegram client is ready, starting TARGETED polling...');
    await this.startPolling();
  }

  async startPolling(): Promise<void> {
    if (this.isPolling) {
      this.logger.warn('‚ö†Ô∏è Polling is already running');
      return;
    }

    try {
      const client = this.telegramClientService.getClient();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
      await this.validateTargetChats();
      
      this.isPolling = true;
      this.logger.log('üöÄ Starting TARGETED polling...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º processed messages –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
      await this.initializeProcessedMessages();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π polling –¢–û–õ–¨–ö–û –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
      this.pollingInterval = setInterval(async () => {
        await this.pollTargetChats();
      }, this.POLLING_INTERVAL);

      this.logger.log(`üëÇ Polling started - checking ONLY target chats every ${this.POLLING_INTERVAL / 1000} seconds`);
      
      // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É
      await this.pollTargetChats();
      
    } catch (error) {
      this.logger.error('‚ùå Failed to start targeted polling:', error.message);
      this.isPolling = false;
    }
  }

  private async validateTargetChats(): Promise<void> {
    this.logger.log('üîç Validating ONLY target chats from env...');
    
    const client = this.telegramClientService.getClient();
    const validChats: string[] = [];

    for (const chatId of this.config.targetChats) {
      try {
        const entity = await client.getEntity(chatId);
        const chatTitle = this.getEntityTitle(entity);
        validChats.push(chatId);
        this.logger.log(`‚úÖ Target chat accessible: ${chatTitle} (${chatId})`);
      } catch (error) {
        this.logger.error(`‚ùå Target chat not accessible: ${chatId} - ${error.message}`);
      }
    }

    if (validChats.length === 0) {
      throw new Error('No accessible target chats found in TARGET_CHATS env');
    }

    this.logger.log(`üìä Will poll ${validChats.length}/${this.config.targetChats.length} target chats`);
  }

  private async initializeProcessedMessages(): Promise<void> {
    this.logger.log('üîÑ Initializing processed messages cache for TARGET chats...');
    
    const client = this.telegramClientService.getClient();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –¥–ª—è —á–∞—Ç–æ–≤ –∏–∑ env
    for (const chatId of this.config.targetChats) {
      try {
        this.logger.log(`üìã Initializing chat: ${chatId}`);
        const entity = await client.getEntity(chatId);
        const chatTitle = this.getEntityTitle(entity);
        
        const messages = await client.getMessages(entity, { limit: this.MESSAGES_LIMIT });
        
        const processedSet = this.processedMessages.get(chatId) || new Set();
        messages.forEach(msg => {
          if (msg.id) {
            processedSet.add(msg.id);
          }
        });
        this.processedMessages.set(chatId, processedSet);
        
        this.logger.log(`üìã Initialized ${processedSet.size} messages for target chat: ${chatTitle} (${chatId})`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        this.logger.error(`‚ùå Failed to initialize target chat ${chatId}: ${error.message}`);
      }
    }
  }

  private async pollTargetChats(): Promise<void> {
    if (!this.isPolling) {
      return;
    }

    this.logger.log('üîÑ Polling TARGET chats for new messages...');
    
    const client = this.telegramClientService.getClient();
    let totalNewMessages = 0;

    // –û–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û —á–∞—Ç—ã –∏–∑ TARGET_CHATS
    for (const chatId of this.config.targetChats) {
      try {
        this.logger.log(`üîç Checking TARGET chat: ${chatId}`);
        
        const entity = await client.getEntity(chatId);
        const chatTitle = this.getEntityTitle(entity);
        
        const messages = await client.getMessages(entity, { limit: this.MESSAGES_LIMIT });
        const processedSet = this.processedMessages.get(chatId) || new Set();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const newMessages = messages.filter(msg => 
          msg.id && !processedSet.has(msg.id) && msg.message
        );

        if (newMessages.length > 0) {
          this.logger.log(`üìù Found ${newMessages.length} new messages in ${chatTitle} (${chatId})`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ)
          const sortedMessages = newMessages.sort((a, b) => a.date - b.date);
          
          for (const message of sortedMessages) {
            await this.processNewMessage(message, chatId, chatTitle);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ processed
            processedSet.add(message.id);
            totalNewMessages++;
          }
          
          this.processedMessages.set(chatId, processedSet);
        } else {
          this.logger.log(`üì≠ No new messages in ${chatTitle} (${chatId})`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 300));
        
      } catch (error) {
        this.logger.error(`‚ùå Failed to poll target chat ${chatId}: ${error.message}`);
      }
    }

    if (totalNewMessages > 0) {
      this.logger.log(`‚úÖ Polling complete: processed ${totalNewMessages} new messages from TARGET chats`);
    } else {
      this.logger.log(`üì≠ Polling complete: no new messages in TARGET chats`);
    }
  }

  private async processNewMessage(message: any, chatId: string, chatTitle: string): Promise<void> {
    try {
      const messageText = message.message;
      const messageDate = new Date(message.date * 1000);
      
      this.logger.log(`üìù Processing message from TARGET chat ${chatTitle}: "${messageText}"`);
      this.logger.log(`‚è∞ Message date: ${messageDate.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let userName: string | null = null;
      let username: string | null = null;
      
      if (message.fromId) {
        try {
          const client = this.telegramClientService.getClient();
          const userEntity = await client.getEntity(message.fromId);
          userName = this.getUserDisplayName(userEntity);
          username = this.getUserUsername(userEntity);
          
          this.logger.log(`üë§ User info: name="${userName}", username="${username}"`);
          
        } catch (error) {
          this.logger.warn(`Failed to get user info: ${error.message}`);
          userName = 'Unknown User';
          username = null;
        }
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const filterResult = this.messageFilterService.filterMessage(messageText, this.config);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.messageFilterService.logFilterResult(chatTitle, messageText, filterResult);

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
      if (filterResult.shouldForward) {
        await this.forwardMessage(
          messageText,
          chatTitle,
          chatId,
          userName,
          username,
          filterResult.matchedKeywords,
          messageDate
        );
      }

    } catch (error) {
      this.logger.error('‚ùå Error processing new message:', error.message);
    }
  }

  private async forwardMessage(
    originalMessage: string,
    chatTitle: string,
    chatId: string,
    userName: string | null,
    username: string | null,
    matchedKeywords: string[],
    messageDate: Date
  ): Promise<void> {
    try {
      this.logger.log(`üì§ Preparing to forward message from TARGET chat to ${this.config.targetChatId}`);
      
      const client = this.telegramClientService.getClient();
      
      const forwardedMessage = this.messageFilterService.formatForwardMessage(
        originalMessage,
        chatTitle,
        chatId,
        userName,
        username,
        matchedKeywords,
        messageDate
      );

      const targetEntity = await client.getEntity(this.config.targetChatId);
      await client.sendMessage(targetEntity, { message: forwardedMessage });
      
      this.logger.log(`‚úÖ Message forwarded successfully from TARGET chat ${chatTitle} (user: ${username || userName})`);
      
    } catch (error) {
      this.logger.error(`‚ùå Failed to forward message: ${error.message}`);
    }
  }

  private getEntityTitle(entity: any): string {
    return entity?.title || entity?.firstName || 'Unknown Chat';
  }

  private getUserDisplayName(entity: any): string {
    if (entity?.firstName && entity?.lastName) {
      return `${entity.firstName} ${entity.lastName}`;
    }
    if (entity?.firstName) {
      return entity.firstName;
    }
    if (entity?.username) {
      return `@${entity.username}`;
    }
    return 'Unknown User';
  }

  private getUserUsername(entity: any): string | null {
    if (entity?.username) {
      return `@${entity.username}`;
    }
    return null;
  }

  stopPolling(): void {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
    
    if (this.isPolling) {
      this.isPolling = false;
      this.logger.log('üõë Targeted polling stopped');
    }
  }

  isActive(): boolean {
    return this.isPolling;
  }
}
