import { Injectable, Logger } from '@nestjs/common';
import { TelegramClientService } from './telegram/telegram-client.service';
import { Api } from 'telegram';

@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);

  constructor(private readonly telegramClient: TelegramClientService) {}

  getHello(): string {
    return 'Hello World!';
  }

  async getChatHistory(params: {
    fromDate?: string;
    toDate?: string;
    hoursBack?: number;
  }) {
    try {
      const client = this.telegramClient.getClient();
      
      const targetChatId = process.env.TARGET_CHATS;
      if (!targetChatId) {
        throw new Error('TARGET_CHATS environment variable is not set');
      }

      this.logger.log(`üîç Attempting to get chat history for: ${targetChatId}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      let hoursBack = params.hoursBack;
      if (!hoursBack) {
        // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
        const timeshiftHours = parseInt(process.env.TIMESHIFT_TO_REQUEST || '24');
        hoursBack = timeshiftHours;
      }

      this.logger.log(`‚è∞ Looking back ${hoursBack} hours`);
      
      let fromDate = params.fromDate;
      if (!fromDate) {
        const hoursAgo = new Date();
        hoursAgo.setHours(hoursAgo.getHours() - hoursBack);
        fromDate = hoursAgo.toISOString();
      }

      this.logger.log(`üìÖ From date: ${fromDate}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (!this.telegramClient.isReady()) {
        throw new Error('Telegram client is not ready');
      }

      let entity;
      try {
        entity = await client.getEntity(targetChatId);
        this.logger.log(`‚úÖ Successfully connected to chat: ${entity.title || targetChatId}`);
      } catch (entityError) {
        this.logger.error(`‚ùå Failed to get entity for chat ID: ${targetChatId}`);
        this.logger.error(`Entity error: ${entityError.message}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID
        const alternativeIds = [
          targetChatId,
          `-100${targetChatId}`,  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
          targetChatId.replace('-100', ''), // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        ];
        
        this.logger.log(`üîÑ Trying alternative IDs: ${alternativeIds.join(', ')}`);
        
        let foundEntity = false;
        for (const altId of alternativeIds) {
          try {
            entity = await client.getEntity(altId);
            this.logger.log(`‚úÖ Found chat with ID: ${altId} - ${entity.title || altId}`);
            foundEntity = true;
            break;
          } catch (e) {
            this.logger.log(`‚ùå ID ${altId} failed: ${e.message}`);
          }
        }
        
        if (!foundEntity) {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          try {
            this.logger.log(`üîç Getting available dialogs for debugging...`);
            const dialogs = await client.getDialogs({ limit: 10 });
            
            this.logger.log(`üìã Available dialogs (showing first 10):`);
            for (const dialog of dialogs) {
              const entity = dialog.entity as any;
              const title = entity.title || entity.firstName || 'Unknown';
              const id = entity.id || 'Unknown ID';
              this.logger.log(`  - ${title} (ID: ${id})`);
            }
          } catch (dialogError) {
            this.logger.warn(`Failed to get dialogs: ${dialogError.message}`);
          }
          
          throw new Error(`Could not find chat with any of these IDs: ${alternativeIds.join(', ')}. Check if the bot is added to the target chat and the chat ID is correct.`);
        }
      }

      const fromTimestamp = new Date(fromDate).getTime() / 1000;

      let allMessages: any[] = [];
      let offsetId = 0;
      let shouldContinue = true;
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const allUsers = new Map();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
      this.logger.log(`üîç Getting dialogs to check private conversations...`);
      const dialogs = await client.getDialogs({ limit: 100 }); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const privateDialogs = new Set();
      
      for (const dialog of dialogs) {
        const entity = dialog.entity as any;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª)
        if (entity.className === 'User' && entity.id) {
          privateDialogs.add(entity.id);
        }
      }
      
      this.logger.log(`üì± Found ${privateDialogs.size} private conversations`);

      while (shouldContinue) {
        const result = await client.invoke(
          new Api.messages.GetHistory({
            peer: entity,
            limit: 100,
            offsetId: offsetId
          })
        );

        if (!('messages' in result) || result.messages.length === 0) {
          break;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if ('users' in result) {
          for (const user of result.users) {
            allUsers.set((user as any).id, user);
          }
        }

        for (const msg of result.messages) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –∏–º–µ–µ—Ç –¥–∞—Ç—É
          if ((msg as any).date && (msg as any).date >= fromTimestamp) {
            allMessages.push(msg);
            offsetId = (msg as any).id;
          } else if ((msg as any).date && (msg as any).date < fromTimestamp) {
            shouldContinue = false;
            break;
          }
        }

        if (result.messages.length < 100) {
          break;
        }
      }

      const formattedMessages: any[] = [];
      
      for (const msg of allMessages) {
        let fromUsername: string | null = null;
        let fromFirstName: string | null = null;
        let fromLastName: string | null = null;
        let hasPrivateChat: boolean = false;

        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ñ–ï –ü–û–õ–£–ß–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó allUsers
        if (msg.fromId) {
          const userId = typeof msg.fromId === 'object' && 'userId' in msg.fromId 
            ? msg.fromId.userId 
            : msg.fromId;
            
          const user = allUsers.get(userId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          hasPrivateChat = privateDialogs.has(userId);
          
          if (user) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
            fromUsername = user.username ? `@${user.username}` : null;
            fromFirstName = user.firstName || null;
            fromLastName = user.lastName || null;
          } else {
            // –§–æ–ª–ª–±—ç–∫: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            try {
              const userEntity = await client.getEntity(msg.fromId);
              const userName = this.getUserDisplayName(userEntity);
              const username = this.getUserUsername(userEntity);
              
              fromUsername = username;
              // –†–∞–∑–±–∏–≤–∞–µ–º display name –Ω–∞ —á–∞—Å—Ç–∏
              if (userName && userName !== 'Unknown User') {
                const nameParts = userName.replace('@', '').split(' ');
                fromFirstName = nameParts[0] || null;
                fromLastName = nameParts.length > 1 ? nameParts.slice(1).join(' ') : null;
              }
            } catch (error) {
              this.logger.warn(`Failed to get user info for message ${msg.id}: ${error.message}`);
              // –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ null, —á—Ç–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—à–µ
            }
          }
        }

        formattedMessages.push({
          message_id: msg.id,
          text: msg.message || '[–º–µ–¥–∏–∞ —Ñ–∞–π–ª]',
          date: new Date(msg.date * 1000).toISOString(),
          timestamp: msg.date,
          from_username: fromUsername,
          from_first_name: fromFirstName,
          from_last_name: fromLastName,
          has_private_chat: hasPrivateChat
        });
      }

      return {
        success: true,
        data: {
          messages: formattedMessages,
          total_found: formattedMessages.length,
          chat_id: targetChatId,
          timeshift_hours: hoursBack,
          calculated_from_date: fromDate
        }
      };

    } catch (error) {
      this.logger.error('Error fetching chat history:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  private getUserDisplayName(entity: any): string {
    if (entity?.firstName && entity?.lastName) {
      return `${entity.firstName} ${entity.lastName}`;
    }
    if (entity?.firstName) {
      return entity.firstName;
    }
    if (entity?.username) {
      return `@${entity.username}`;
    }
    return 'Unknown User';
  }

  private getUserUsername(entity: any): string | null {
    if (entity?.username) {
      return `@${entity.username}`;
    }
    return null;
  }
}
