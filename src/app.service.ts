import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { TelegramClientService } from './telegram/telegram-client.service';
import { getMonitoringConfig } from './monitoring/monitoring.config';

@Injectable()
export class AppService implements OnModuleInit {
  private readonly logger = new Logger(AppService.name);

  constructor(
    private readonly telegramClientService: TelegramClientService,
  ) {}

  async onModuleInit() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const requiredEnvVars = [
        'TELEGRAM_API_ID',
        'TELEGRAM_API_HASH',
        'TARGET_CHATS',
        'KEYWORDS',
        'TARGET_CHAT_ID'
      ];

      const missingVars = requiredEnvVars.filter(varName => {
        const value = process.env[varName];
        return !value || value.trim().length === 0 || 
               value === 'your_api_id' || value === 'your_api_hash' ||
               value === 'your_phone_number';
      });

      if (missingVars.length > 0) {
        this.logger.error('‚ùå Missing required environment variables:');
        missingVars.forEach(varName => {
          this.logger.error(`   - ${varName}`);
        });
        this.logger.log('üí° Please fill all required variables in .env file');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      try {
        const config = getMonitoringConfig();
        this.logger.log('‚úÖ Monitoring configuration validated:');
        this.logger.log(`üéØ Monitoring ${config.targetChats.length} chats`);
        this.logger.log(`üìù Looking for ${config.keywords.length} keywords`);
        this.logger.log(`üì§ Forwarding to: ${config.targetChatId}`);
      } catch (configError) {
        this.logger.error('‚ùå Invalid monitoring configuration:', configError.message);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ session string
      const sessionString = process.env.TELEGRAM_SESSION_STRING;
      if (!sessionString || sessionString.trim().length === 0) {
        this.logger.warn('‚ö†Ô∏è TELEGRAM_SESSION_STRING not found in .env file');
        this.logger.log('üìã First run: will require phone authentication');
        this.logger.log('üí° Copy session string from logs to .env for server deployment');
        this.logger.log('');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.sendTestMessage();
      
    } catch (error) {
      this.logger.error('Application error:', error.message);
    }
  }

  private async sendTestMessage() {
    this.logger.log('üì§ Starting test message sending...');
    
    try {
      // –ñ–¥–µ–º –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
      if (!this.telegramClientService.isReady()) {
        this.logger.log('‚è≥ Waiting for Telegram client to be ready...');
        let attempts = 0;
        while (!this.telegramClientService.isReady() && attempts < 30) {
          await new Promise(resolve => setTimeout(resolve, 1000));
          attempts++;
        }
        
        if (!this.telegramClientService.isReady()) {
          this.logger.error('‚ùå Telegram client failed to initialize within 30 seconds');
          return;
        }
      }
      
      const client = this.telegramClientService.getClient();
      const config = getMonitoringConfig();
      const testMessage = `üöÄ Request Vacuumer Started!

‚è∞ Started at: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
üéØ Monitoring ${config.targetChats.length} chats
üìù Keywords: ${config.keywords.join(', ')}
‚úÖ System is ready and monitoring!`;
      
      this.logger.log(`üìù Sending startup notification to: ${config.targetChatId}`);
      
      try {
        const entity = await client.getEntity(config.targetChatId);
        await client.sendMessage(entity, { message: testMessage });
        
        this.logger.log('‚úÖ Startup notification sent successfully!');
        this.logger.log('üéâ Request Vacuumer is now monitoring chats...');
      } catch (sendError) {
        this.logger.error(`‚ùå Failed to send startup notification: ${sendError.message}`);
      }
      
    } catch (error) {
      this.logger.error('‚ùå Test message failed:', error.message);
    }
  }

  getHello(): string {
    return 'Request Vacuumer - Telegram Chat Monitor';
  }
}
